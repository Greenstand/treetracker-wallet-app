name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - development
      - test
      - production
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  gitleaks:
    name: Run Gitleaks Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz -o gitleaks.tar.gz
          mkdir -p gitleaks
          tar -xvzf gitleaks.tar.gz -C gitleaks
          sudo mv gitleaks/gitleaks /usr/local/bin

      - name: Run Gitleaks
        run: |
          gitleaks detect --redact -v \
            --exit-code=2 \
            --report-format sarif \
            --report-path gitleaks-results.sarif

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-results.sarif

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks_results
          path: gitleaks-results.sarif
          if-no-files-found: warn

  lint-and-test:
    name: Lint, Type Check, and Test React App
    runs-on: ubuntu-latest
    needs: gitleaks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint (if available)
        run: |
          if yarn run | grep -q "lint"; then
            echo "✅ Lint script found. Running yarn lint..."
            yarn lint
          else
            echo "⚠️ No lint script found. Skipping."
          fi

      - name: Run Type Check (if available)
        run: |
          if yarn run | grep -q "type-check"; then
            echo "✅ Type-check script found. Running yarn type-check..."
            yarn type-check
          else
            echo "⚠️ No type-check script found. Skipping."
          fi

      - name: Run Tests
        run: yarn test --ci --watchAll=false

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: ignore

  deploy-to-s3:
    name: Deploy to S3 Bucket
    runs-on: ubuntu-latest
    needs: 
      - lint-and-test
    if: github.ref_name == 'main' || github.ref_name == 'development'
    env:
      AWS_REGION: us-east-1
      S3_BUCKET_NAME: your-s3-bucket-name # Replace with your actual bucket
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: |
          aws s3 sync ./out s3://${{ env.S3_BUCKET_NAME }} \
            --delete \
            --acl public-read \
            --cache-control "max-age=31536000"

      - name: Invalidate CloudFront (optional)
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
